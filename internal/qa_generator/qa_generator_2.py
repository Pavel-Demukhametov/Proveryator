
from g4f.client import Client
from g4f.Provider import RetryProvider, ChatGLM, DDG, Free2GPT, GizAI, Liaobots, OIVSCode, PollinationsAI
import json


class QAGenerator:
    def __init__(self):
        providers = [DDG, PollinationsAI, Liaobots, OIVSCode, Free2GPT, GizAI, ChatGLM]
        self.client = Client(provider=RetryProvider(providers, shuffle=True))
        self.model = "gpt-4o-mini"
        
        self.mc_prompt_template = """Проанализируй приведенный ниже текст на русском языке и сгенерируй вопрос с четырьмя вариантами ответов на основе его содержания. Вопрос должен быть на программирование или математику. Вопросы должны быть фундаментальные, а не на примеры. Один из вариантов должен быть правильным. Ответ должен быть простым, состоять максимум из нескольких слов. Остальные варианты ответа должны быть неправильными и не подходить. Вопрос и ответы не должны соедржать сложные формулы, максимум простые без индексов сверху или снизу.
Не включай никаких комментариев, ответь только JSON-объектом следующего вида:
{{
  "Вопрос": "<текст вопроса на русском языке>",
  "Варианты": [<вариант1>, <вариант2>, <вариант3>, <вариант4>],
  "Правильный_ответ": <индекс верного ответа в массиве Варианты, начиная с 0>
}}
Если текст не подходит для составление вопроса, ответь словом "Далее".
Текст для анализа: "{}"
"""
        
        self.open_prompt_template = """Проанализируй приведенный ниже текст на русском языке и сгенерируй открытый вопрос на основе его содержания. Вопрос должен быть на программирование или математику. Вопросы должны быть фундаментальные, а не на примеры. Также предоставь правильный ответ на этот вопрос. Ответ должен быть простым, состоять максимум из нескольких слов. Остальные варианты ответа должны быть неправильными и не подходить. Вопрос и ответы не должны соедржать сложные формулы, максимум простые без индексов сверху или снизу.
Не включай никаких комментариев, ответь только JSON-объектом следующего вида:
{{
  "Вопрос": "<текст вопроса на русском языке>",
  "Правильный_ответ": "<правильный ответ>"
}}
Если текст не подходит для составление вопроса, ответь словом "Далее".
Текст для анализа: "{}"
"""

    def generate_qa(self, text: str, keyword: str, is_open: bool) -> dict:
        """
        Генерирует вопрос на основе текста и ключевого слова.
        
        :param text: Текст для анализа
        :param keyword: Ключевое слово или тема
        :param is_open: Флаг, указывающий на тип вопроса (True для открытых, False для MC)
        :return: Словарь с вопросом и ответами
        """
        print("Генерация вопроса")
        if is_open:
            prompt = self.open_prompt_template.format(text)
        else:
            prompt = self.mc_prompt_template.format(text)
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
            )
            response_content = response.choices[0].message.content
            if response_content == "Далее":
                return {}
            result = json.loads(response_content)
            if is_open and "Варианты" in result:
                del result["Варианты"]
            
            return result
        except Exception as e:
            print(f"Ошибка при генерации вопроса: {e}")
            return {}